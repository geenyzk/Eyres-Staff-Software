"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from pathlib import Path
import os
# --- Load environment variables from .env file ---
from dotenv import load_dotenv
load_dotenv()
# Ensure Python and requests use a valid CA bundle (fixes SSL verify errors)
try:
    import certifi  # type: ignore
    os.environ.setdefault('SSL_CERT_FILE', certifi.where())
    os.environ.setdefault('REQUESTS_CA_BUNDLE', certifi.where())
except Exception:
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vv2v$dpxatn6bfip300x!#*9$-_ln!d@0o(&cl@+)myzlk%@46'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Allow local hosts for development and test client
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', 'testserver']


# Application definition
AUTH_USER_MODEL = 'accounts.CustomUser'  # ✅ Add this line to specify the custom user model
 


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'accounts',
    'sendgrid_backend',

]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'website.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # ✅ Add this line
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR.parent / "static",  # ✅ Correct — this points to Eyres-Staff-Software/static
]


# --- Email configuration ---
# Smart defaults:
# - If EMAIL_BACKEND env is provided, use it. If it's SendGrid API backend
#   but the package/key is missing, fall back to SMTP with SENDGRID_API_KEY.
# - If no backend is provided but SENDGRID_API_KEY exists, use SMTP with SendGrid.
# - Otherwise, use console backend (prints to terminal).

EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'

def _bool(env_value, default=True):
    if env_value is None:
        return default
    return str(env_value).lower() in ('1', 'true', 'yes', 'on')

sg_key = os.getenv("SENDGRID_API_KEY")
# Expose key to settings for django-sendgrid-v5 backend
SENDGRID_API_KEY = sg_key

if EMAIL_BACKEND == 'sendgrid_backend.SendgridBackend':
    try:
        import sendgrid_backend  # type: ignore  # noqa: F401
        if not sg_key:
            raise ImportError('SENDGRID_API_KEY missing')
        # SendGrid backend will read SENDGRID_API_KEY from env
    except Exception:
        # Fallback to SMTP with SendGrid if key present; else console
        if sg_key:
            EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
            EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.sendgrid.net')
            EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
            EMAIL_USE_TLS = _bool(os.environ.get('EMAIL_USE_TLS', 'True'), True)
            EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'apikey')
            EMAIL_HOST_PASSWORD = sg_key
        else:
            EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    if not EMAIL_BACKEND and sg_key:
        EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.sendgrid.net')
        EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
        EMAIL_USE_TLS = _bool(os.environ.get('EMAIL_USE_TLS', 'True'), True)
        EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'apikey')
        EMAIL_HOST_PASSWORD = sg_key
    elif not EMAIL_BACKEND:
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', os.environ.get('EMAIL_HOST_USER', 'geeniazuka@gmail.com'))
ADMIN_EMAILS = [e.strip() for e in os.environ.get('ADMIN_EMAILS', '').split(',') if e.strip()]

# Auth redirects
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'landing'
LOGOUT_REDIRECT_URL = 'login'
